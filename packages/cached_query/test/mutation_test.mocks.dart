// Mocks generated by Mockito 5.2.0 from annotations
// in cached_query/test/mutation_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cached_query/cached_query.dart' as _i3;
import 'package:cached_query/src/default_query_config.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDefaultQueryConfig_0 extends _i1.Fake
    implements _i2.DefaultQueryConfig {}

class _FakeQueryState_1<T> extends _i1.Fake implements _i3.QueryState<T> {}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuery<T> extends _i1.Mock implements _i3.Query<T> {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  _i2.DefaultQueryConfig get config =>
      (super.noSuchMethod(Invocation.getter(#config),
          returnValue: _FakeDefaultQueryConfig_0()) as _i2.DefaultQueryConfig);
  @override
  _i3.QueryState<T> get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeQueryState_1<T>()) as _i3.QueryState<T>);
  @override
  bool get stale =>
      (super.noSuchMethod(Invocation.getter(#stale), returnValue: false)
          as bool);
  @override
  bool get hasListener =>
      (super.noSuchMethod(Invocation.getter(#hasListener), returnValue: false)
          as bool);
  @override
  _i4.Stream<_i3.QueryState<T>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.QueryState<T>>.empty())
          as _i4.Stream<_i3.QueryState<T>>);
  @override
  _i4.Future<_i3.QueryState<T>> get result => (super.noSuchMethod(
          Invocation.getter(#result),
          returnValue: Future<_i3.QueryState<T>>.value(_FakeQueryState_1<T>()))
      as _i4.Future<_i3.QueryState<T>>);
  @override
  _i4.Future<_i3.QueryState<T>> refetch() => (super.noSuchMethod(
          Invocation.method(#refetch, []),
          returnValue: Future<_i3.QueryState<T>>.value(_FakeQueryState_1<T>()))
      as _i4.Future<_i3.QueryState<T>>);
  @override
  void update(_i3.UpdateFunc<T>? updateFn) =>
      super.noSuchMethod(Invocation.method(#update, [updateFn]),
          returnValueForMissingStub: null);
  @override
  void invalidateQuery() =>
      super.noSuchMethod(Invocation.method(#invalidateQuery, []),
          returnValueForMissingStub: null);
  @override
  void deleteQuery({bool? deleteStorage = false}) => super.noSuchMethod(
      Invocation.method(#deleteQuery, [], {#deleteStorage: deleteStorage}),
      returnValueForMissingStub: null);
}
